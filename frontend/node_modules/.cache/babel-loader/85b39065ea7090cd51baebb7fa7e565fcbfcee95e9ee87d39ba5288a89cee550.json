{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arda\\\\Desktop\\\\detailinx\\\\frontend\\\\src\\\\context\\\\LanguageContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst translations = {\n  tr: {\n    cars: 'Arabalar',\n    works: 'Fotoğraf Galerisi',\n    services: 'Hizmetlerimiz',\n    contact: 'İletişim'\n    // Add more translations as needed\n  },\n  en: {\n    cars: 'Cars',\n    works: 'Gallery',\n    services: 'Services',\n    contact: 'Contact'\n    // Add more translations as needed\n  }\n};\nconst LanguageContext = /*#__PURE__*/createContext();\nexport function LanguageProvider({\n  children\n}) {\n  _s();\n  const [language, setLanguage] = useState('tr'); // Default to Turkish\n\n  const toggleLanguage = () => {\n    setLanguage(prev => prev === 'tr' ? 'en' : 'tr');\n  };\n  const t = key => {\n    return translations[language][key] || key;\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language,\n      toggleLanguage,\n      t\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(LanguageProvider, \"sdQwLqKPpQmdoviV+biTZAI5BPA=\");\n_c = LanguageProvider;\nexport function useLanguage() {\n  _s2();\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}\n_s2(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","translations","tr","cars","works","services","contact","en","LanguageContext","LanguageProvider","children","_s","language","setLanguage","toggleLanguage","prev","t","key","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLanguage","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Arda/Desktop/detailinx/frontend/src/context/LanguageContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst translations = {\r\n    tr: {\r\n        cars: 'Arabalar',\r\n        works: 'Fotoğraf Galerisi',\r\n        services: 'Hizmetlerimiz',\r\n        contact: 'İletişim',\r\n        // Add more translations as needed\r\n    },\r\n    en: {\r\n        cars: 'Cars',\r\n        works: 'Gallery',\r\n        services: 'Services',\r\n        contact: 'Contact',\r\n        // Add more translations as needed\r\n    }\r\n};\r\n\r\nconst LanguageContext = createContext();\r\n\r\nexport function LanguageProvider({ children }) {\r\n    const [language, setLanguage] = useState('tr'); // Default to Turkish\r\n\r\n    const toggleLanguage = () => {\r\n        setLanguage(prev => prev === 'tr' ? 'en' : 'tr');\r\n    };\r\n\r\n    const t = (key) => {\r\n        return translations[language][key] || key;\r\n    };\r\n\r\n    return (\r\n        <LanguageContext.Provider value={{ language, toggleLanguage, t }}>\r\n            {children}\r\n        </LanguageContext.Provider>\r\n    );\r\n}\r\n\r\nexport function useLanguage() {\r\n    const context = useContext(LanguageContext);\r\n    if (!context) {\r\n        throw new Error('useLanguage must be used within a LanguageProvider');\r\n    }\r\n    return context;\r\n} "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,YAAY,GAAG;EACjBC,EAAE,EAAE;IACAC,IAAI,EAAE,UAAU;IAChBC,KAAK,EAAE,mBAAmB;IAC1BC,QAAQ,EAAE,eAAe;IACzBC,OAAO,EAAE;IACT;EACJ,CAAC;EACDC,EAAE,EAAE;IACAJ,IAAI,EAAE,MAAM;IACZC,KAAK,EAAE,SAAS;IAChBC,QAAQ,EAAE,UAAU;IACpBC,OAAO,EAAE;IACT;EACJ;AACJ,CAAC;AAED,MAAME,eAAe,gBAAGZ,aAAa,CAAC,CAAC;AAEvC,OAAO,SAASa,gBAAgBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC3C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEhD,MAAMgB,cAAc,GAAGA,CAAA,KAAM;IACzBD,WAAW,CAACE,IAAI,IAAIA,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;EACpD,CAAC;EAED,MAAMC,CAAC,GAAIC,GAAG,IAAK;IACf,OAAOhB,YAAY,CAACW,QAAQ,CAAC,CAACK,GAAG,CAAC,IAAIA,GAAG;EAC7C,CAAC;EAED,oBACIjB,OAAA,CAACQ,eAAe,CAACU,QAAQ;IAACC,KAAK,EAAE;MAAEP,QAAQ;MAAEE,cAAc;MAAEE;IAAE,CAAE;IAAAN,QAAA,EAC5DA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAEnC;AAACZ,EAAA,CAhBeF,gBAAgB;AAAAe,EAAA,GAAhBf,gBAAgB;AAkBhC,OAAO,SAASgB,WAAWA,CAAA,EAAG;EAAAC,GAAA;EAC1B,MAAMC,OAAO,GAAG9B,UAAU,CAACW,eAAe,CAAC;EAC3C,IAAI,CAACmB,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACzE;EACA,OAAOD,OAAO;AAClB;AAACD,GAAA,CANeD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}